jQuery().ready(function(){    /*    // accordion    var cookieName = 'stickyAccordion';    // simple accordion    var accordion = $("#basic");    var cookie = $.cookies.get( cookieName );    var active;    if (cookie !== null) {        active = accordion.find(".menu_nadpis:eq(" + cookie + ")");    } else {        active = 0    }    jQuery('#basic').accordion({        autoheight: false,        header: '.menu_nadpis',        active: active,    }).bind("change.ui-accordion", function(event, ui) {        $.cookies.set( cookieName, $(this).find('.menu_nadpis').index(ui.newHeader[0]) );    });*/    // tabs    $( ".tabs" ).tabs({ fx: { opacity: 'toggle', duration:'fast'} });    // sortable    $( "#sortable" ).sortable();    $( "#sortable" ).disableSelection();    // bleah bleah    /*var left = $("#container").offset().left - 162;    $(".clever_ad").css("position", "fixed");    $(".clever_ad").css("left", left);    $(".clever_ad").css("top", 350);*/});// TODO: Can replace only {var} at the timefunction f(text, ...tokens) {    text = text.replace(/{B}/g, '<strong>');    text = text.replace(/{\/B}/g, '</strong>');    text = text.replace(/{I}/g, '<em>');    text = text.replace(/{\/I}/g, '</em>');    text = text.replace(/{SUCCESS}/g, '<span class="text-success">');    text = text.replace(/{\/SUCCESS}/g, '</span>');    text = text.replace(/{IMPORTANT}/g, '<span class="text-danger">');    text = text.replace(/{\/IMPORTANT}/g, '</span>');    text = text.replace(/{P}/g, '<p>');    text = text.replace(/{\/P}/g, '</p>');    text = text.replace(/{BR}/g, '<br />');    text = text.replace(/{SMALL}/g, '<small>');    text = text.replace(/{\/SMALL}/g, '</small>');    text = text.replace(/{QUOT}/g, '"');    text = text.replace(/{_BLANK}/g, 'target="_blank"');    let match;    let constantPattern = /{T::([A-Z_0-9]+)}/g;    while ((match = constantPattern.exec(text)) != null) {        text = text.replace(match[0], T[match[1]]);        console.log(match);    }    // {LINK|{title}|{href}[|{_BLANK}]}    let linkPattern = /{LINK\|({?[^|{}]+}?)\|({?[^|{}]+}?)(\|({?[^|{}]+}?))?}/g;    text = text.replace(linkPattern, '<a href="$2" $4>$1</a>');    let variablePattern = /{(var|fileSize)}/g;    let i = 0;    while ((match = variablePattern.exec(text)) != null) {        switch (match[1]) {            case 'var':                text = text.replace('{var}', tokens[i]);                break;            case 'fileSize':                text = text.replace('{fileSize}', FormatHelper.fileSize(tokens[i]));                break;        }        i++;        variablePattern.lastIndex = 0;    }    return text;}